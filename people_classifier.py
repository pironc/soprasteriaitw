##
## SOPRA STERIA ITW
## PEOPLE CLASSIFIER
##


import random


# List of first names (sample generated by AI)
fnames = [
    "Alexander", "Benjamin", "Charlotte", "Daniel", "Eleanor", "Fiona", "Gabriel", "Hannah", "Isaac", "Julia",
    "Katherine", "Liam", "Mia", "Nathan", "Olivia", "Patrick", "Quinn", "Rebecca", "Samuel", "Tessa",
    "Ulysses", "Victoria", "William", "Xavier", "Yasmine", "Zachary", "Abigail", "Bryan", "Clara", "Derek",
    "Evelyn", "Felix", "Grace", "Henry", "Iris", "Jack", "Karen", "Lucas", "Madeline", "Noah", "Ophelia",
    "Paul", "Quincy", "Rose", "Sophia", "Thomas", "Uma", "Valerie", "Wesley", "Xenia", "Yvonne", "Zane",
    "Alicia", "Brandon", "Catherine", "David", "Emily", "Francis", "Georgia", "Harper", "Ivan", "James",
    "Kimberly", "Logan", "Melissa", "Nina", "Oscar", "Peter", "Quinlan", "Riley", "Sarah", "Theodore",
    "Uriah", "Violet", "Wyatt", "Ximena", "Yara", "Zoe", "Amelia", "Blake", "Chloe", "Dominic", "Ethan",
    "Faith", "Gemma", "Hudson", "Isla", "Jacob"
]

# List of last names (sample generated by AI)
lnames = [
    "Adams", "Baker", "Carter", "Davis", "Evans", "Foster", "Garcia", "Harris", "Iverson", "Jackson",
    "Keller", "Lewis", "Morris", "Nelson", "Olsen", "Parker", "Quinn", "Roberts", "Smith", "Taylor",
    "Underwood", "Vargas", "Walker", "Xu", "Young", "Zimmerman", "Anderson", "Brown", "Clark", "Diaz",
    "Edwards", "Fisher", "Gonzalez", "Hall", "Ingram", "Johnson", "King", "Lopez", "Martinez", "Nguyen",
    "Owens", "Perez", "Quigley", "Reed", "Stewart", "Thomas", "Urban", "Vasquez", "White", "Xiong",
    "York", "Zhang", "Allen", "Brooks", "Collins", "Dean", "Ellis", "Fleming", "Grant", "Howard",
    "Irwin", "Jameson", "Kirk", "Long", "Miller", "Nichols", "Ortiz", "Patel", "Quinton", "Ramos",
    "Sanders", "Turner", "Ulrich", "Vega", "Wilson", "Xander", "Yates", "Zamora", "Avery", "Bryant",
    "Chavez", "Dunn", "Ellington", "Freeman", "Greene", "Hughes", "Irving", "Jefferson", "Knight",
    "Lawson", "Morgan", "Nash", "OConnor", "Powell", "Qualls", "Richards", "Stone", "Tucker"
]

sexes = ["Male", "Female"]


# Function to generate and store a list of 50 people with randomized first name, last name, age and sex for each
# Names will be taken from the above lists.
def read_people():
    people_list = []

    for i in range(50):
        first_name = fnames[random.randint(0, len(fnames) - 1)]
        last_name = lnames[random.randint(0, len(lnames) - 1)]
        age = random.randint(8, 65)
        sex = sexes[random.randint(0, 1)]

        person = [first_name, last_name, age, sex]
        people_list.append(person)
        i += 1
    return (people_list)



# Function used to print the list of people, to see the correlation between the output and the generated list of people
def print_people(people_list):
    for person in people_list:
        print(f"{person[0]}, {person[1]} : {[person[2]]} - {person[3]}")



# Function used to classify people
def classify_people(people_list):
    total_people = len(people_list)

    adults = 0
    male_adults = 0

    minors = 0
    female_minors = 0

    for person in people_list:
        if person[2] >= 18:
            adults += 1
            if person[3] == "Male":
                male_adults += 1
        else:
            minors += 1

        if person[3] == "Female":
            if person[2] < 18:
                female_minors += 1

    minors = total_people - adults
    adult_percentage = int((adults / total_people) * 100)
    women_percentage = int(100 - ((male_adults / total_people) * 100))

    print(f"Total people: {total_people}\n")
    print(f"Adults: {adults}")
    print(f"- Which of male adults: {male_adults}\n")
    print(f"Minors: {minors}")
    print(f"- Which of female minors: {female_minors}\n")
    print(f"Adult percentage: {adult_percentage}%")
    print(f"Women percentage: {women_percentage}%")
    return (0)



# Function used to print the classification of people
def print_people(people_list):
    for person in people_list:
        print(f"{person[0]}, {person[1]} : {[person[2]]} - {person[3]}")
    print("\n\n")
    return (0)


# Main function to run the program and get default variables to use in the program functions
def main():
    # read_people is the "LIRE PERSONNES" or "LEER PERSONAS" instruction from the document
    people_list = read_people()

    # function used to print the list of people, to see the correlation between the output and the generated list of people
    # You can comment it out to only see the results
    print_people(people_list)

    # showing the randomized number used for the program testing, up to 42 included
    ret = classify_people(people_list)
    return (ret)

main()